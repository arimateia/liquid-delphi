unit TestLiquid;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, System.Generics.Collections,
  System.SysUtils, System.RegularExpressions,
  System.IOUtils, System.Rtti,
  System.JSON, REST.Json,

  Liquid.Interfaces,
  Liquid.Default,
  Liquid.Template,
  Liquid.Hash,
  Liquid.Condition,
  Liquid.Utils,
  Liquid.Context,
  Liquid.Exceptions,
  Liquid.Variable,
  Liquid.Filters;

type
  LiquidBaseTestCase = class(TTestCase)
  strict private
    FContext: ILiquidContext;
  protected
    function SerializeArray<T: class>(Arr: TArray<T>): string;
    function SerializeObj(Obj: TObject): string;
    procedure CheckCondition(Expected: boolean; const Left: string;
      const _Operator: string; const Right: string);
    procedure CheckConditionTrue(const Left: string; const _Operator: string; const Right: string);
    procedure CheckConditionFalse(const Left: string;const _Operator: string; const Right: string);
    procedure CheckTemplateResult(Expected: string; Template: string); overload;
    procedure CheckTemplateResult(const Expected: string; const Template: string; const JsonVariables: string); overload;
    procedure SetContext(Context: ILiquidContext);
    function EqualVariables(const Left, Right: TValue): boolean;
    function Compare(const Left, Right: TValue): integer;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;

  Hash = class(LiquidBaseTestCase)
  published
    procedure FromJson1;
    procedure FromJson2;
    procedure FromJson3;
    procedure FromJson4;
    procedure JsonWithDate;
    procedure JsonWithDateTime;
    procedure JsonArray;
  end;

  Variables = class(LiquidBaseTestCase)
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestVariable;
    procedure VariableWithFilter;
    procedure DateTimeVariable;
  end;

  Assign = class(LiquidBaseTestCase)
  published
    procedure BasicAssign;
  end;

  _If = class(LiquidBaseTestCase)
  private
//    procedure SyntaxErrorNoVariable;
  published
    procedure TestIf;
    procedure IfElse;
    procedure IfBoolean;
    procedure IfOr;
    procedure IfWithOperator;
    procedure IfAnd;
    procedure HashMissGeneratesFalse;
    procedure IfFromVariable;
    procedure NestedIf;
    procedure ComparisonsOnNull;
    procedure ComparisonsOnArray;
    procedure ElseIf;

    procedure SyntaxErrorNoExpression;
    procedure IfMaxConditions;
  end;

  _For = class(LiquidBaseTestCase)
  published
    procedure TestFor;
    procedure ForWithVariable;
    procedure ForHelpers;
    procedure ForAndIf;
    procedure Limiting;
    procedure DynamicVariableLimiting;
    procedure NestedFor;
    procedure OffsetSetOnly;
    procedure PauseResume;
    procedure PauseResumeLimit;
    procedure PauseResumeBigLimit;
    procedure PauseResumeBigOffset;
    procedure ForWithBreak;
    procedure ForWithContinue;
    procedure BreakOutsideFor;
    procedure ContinueOutsideFor;
    procedure ArrayOfObjects;
    procedure ForElse;
  end;

  Conditions = class(LiquidBaseTestCase)
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure CompareOperator;
    procedure CompareHashes;

    procedure DefaultOperatorsEvaluateTrue;
    procedure DefaultOperatorsEvaluateFalse;
    procedure ContainsWorksOnStrings;
    procedure ContainsWorksOnIntArrays;
    procedure ContainsWorksOnLongArrays;
    procedure StringArrays;
    procedure ClassArrays;
    procedure TruthyArrays;
    procedure CharArrays;
    procedure ContainsWorksOnDoubleArrays;
    procedure ContainsReturnsFalseForNilCommands;
    procedure StartsWithWorksOnStrings;
    procedure StartsWithWorksOnArrays;
    procedure StartsWithReturnsFalseForNilCommands;
    procedure EndsWithWorksOnStrings;
    procedure EndsWithWorksOnArrays;
    procedure EndsWithReturnsFalseForNilCommands;
    procedure HasKey;
    procedure HasValue;

    procedure OrCondition;
    procedure AndCondition;

    procedure BasicTemplateResult;
    procedure Assign_If;
  end;

  StandardFilters = class(LiquidBaseTestCase)
  private
  public
  published
    procedure Default;
    procedure Upcase;
    procedure Downcase;
    procedure Append;
    procedure Date;
    procedure Slice;
  end;

  Template = class(LiquidBaseTestCase)
  type
    TInternalLiquidTemplate = class(TLiquidTemplate);
  private
    Template: TInternalLiquidTemplate;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TokenizeStrings;
    procedure TokenizeVariables;
    procedure TokenizeBlocks;

    procedure InstanceAssignsPersistOnSameTemplateObjectBetweenParses;
  end;

  AnotherTests = class(LiquidBaseTestCase)
  public
    procedure SetUp; override;
    procedure TearDown; override;
  private
  published
    procedure Example1;
    procedure Example2;
    procedure Example3;

    procedure Chargify_CardExpirationEmail;
    procedure Chargify_SignupEmail;

    procedure HtmlEmail1;
  end;

function ParseAndRender(Template: string; JsonVariables: string): string; overload;
function ParseAndRender(Template: string; JsonVariables: string;
  FormatSettings: TFormatSettings): string; overload;

implementation

type
  TCar = class
  strict private
    FMake: string;
    FModel: string;
  public
    constructor Create(const AMake: string; const AModel: string);
    property Make: string read FMake write FMake;
    property Model: string read FModel write FModel;
  end;

  TPerson = class
  strict private
    FName: string;
    FCars: TArray<TCar>;
  public
    constructor Create(const AName: string; const ACars: TArray<TCar>);
    property Name: string read FName write FName;
    property Cars: TArray<TCar> read FCars write FCars;
  end;

  TInternalConditionOperatorDelegate = class(TConditionOperatorDelegate);

function ParseAndRender(Template: string; JsonVariables: string): string;
begin
  Result := ParseAndRender(Template, JsonVariables, TFormatSettings.Invariant);
end;

function ParseAndRender(Template: string; JsonVariables: string;
  FormatSettings: TFormatSettings): string; overload;
begin
  var Variables := THash.FromJson(JsonVariables);
  var LiquidTemplate := TLiquidTemplate.Parse(Template);
  try
    Result := LiquidTemplate.Render(Variables, FormatSettings);
  finally
    LiquidTemplate.Free;
//    Variables.Free;
  end;
end;

procedure AnotherTests.Chargify_CardExpirationEmail;
begin
  var Template :=
    'Dear {{name}},' +
    '' +
    'Your credit card {{masked_card_number}} is set to expire in {{days_until_card_expiration}} day(s).' +
    '' +
    'Please visit {{update_url}} to update your card.' +
    '' +
    'Cheers,' +
    '{{merchant_name}}';

  var Variables :=
    '{' +
    '  "name": "Fulano",' +
    '  "masked_card_number": "XXXX-1234",' +
    '  "days_until_card_expiration": 30,' +
    '  "update_url": "www.bla.com",' +
    '  "merchant_name": "Vendedor Campeão"' +
    '}';

   var ExpectedString :=
    'Dear Fulano,' +
    '' +
    'Your credit card XXXX-1234 is set to expire in 30 day(s).' +
    '' +
    'Please visit www.bla.com to update your card.' +
    '' +
    'Cheers,' +
    'Vendedor Campeão';

  CheckEquals(ExpectedString, ParseAndRender(Template, Variables));
end;

procedure AnotherTests.Chargify_SignupEmail;
begin
  var Template :=
    'Hello {{customer.name}},' +
    '' +
    'You''ve signed up for {{product.family.name}} ({{product.name}}).' +
    '{% if product.update_return_url %}' +
    'Now that you''re all signed up, head over to {{product.update_return_url}}.' +
    '{% endif %}' +
    '' +
    '{% if subscription.require_introductory_offer_trial_information %}' +
    'The trial period length of your subscription is {{ subscription.introductory_offer_period_length }} and ends at: {{ subscription.introductory_offer_ends_at }}.' +
    '' +
    'The first subsequent transaction for estimated amount of {{ subscription.introductory_offer_estimated_renewal_amount }} will take place on {{ subscription.introductory_offer_ends_at }}.' +
    '' +
    '{% if subscription.billing_portal %}' +
    'If you’d like to cancel your subscription or make a change to your billing information, please visit:' +
    '{{subscription.billing_portal_management_url}}' +
    '{% else %}' +
    'Please email us if you''d like to cancel your subscription.' +
    '{% endif %}' +
    '{% endif %}' +
    '' +
    'Thanks,' +
    '{{merchant_name}}';


  var Variables :=
    '{' +
    '  "customer": {"name": "Fulano"},' +
    '  "product": {' +
    '    "name": "Plano Grátis",' +
    '    "update_return_url": "https://www.validadortiss.com.br",' +
    '    "family": {"name": "Validador TISS"}' +
    '  },' +
    '  "subscription": {' +
    '    "require_introductory_offer_trial_information": true,' +
    '    "introductory_offer_period_length": "7 days",' +
    '    "introductory_offer_ends_at": "2021-03-31",' +
    '    "introductory_offer_estimated_renewal_amount": 59,' +
    '    "billing_portal": true,' +
    '    "billing_portal_management_url": "https://billing.validadortiss.com.br"' +
    '  },' +
    '  "merchant_name": "Plataforma TISS"' +
    '}';

  var ExpectedString :=
    'Hello Fulano,' +
    '' +
    'You''ve signed up for Validador TISS (Plano Grátis).' +
    'Now that you''re all signed up, head over to https://www.validadortiss.com.br.' +
    '' +
    'The trial period length of your subscription is 7 days and ends at: 03/31/2021.' +
    '' +
    'The first subsequent transaction for estimated amount of 59 will take place on 03/31/2021.' +
    '' +
    'If you’d like to cancel your subscription or make a change to your billing information, please visit:' +
    'https://billing.validadortiss.com.br' +
    '' +
    'Thanks,' +
    'Plataforma TISS';

  CheckEquals(ExpectedString, ParseAndRender(Template, Variables));

  Variables :=
    '{' +
    '  "customer": {"name": "Fulano"},' +
    '  "product": {' +
    '    "name": "Plano Grátis",' +
    '    "update_return_url": "https://www.validadortiss.com.br",' +
    '    "family": {"name": "Validador TISS"}' +
    '  },' +
    '  "subscription": {' +
    '    "require_introductory_offer_trial_information": true,' +
    '    "introductory_offer_period_length": "7 days",' +
    '    "introductory_offer_ends_at": "2021-03-31",' +
    '    "introductory_offer_estimated_renewal_amount": 59,' +
    '    "billing_portal": false,' +
    '    "billing_portal_management_url": null' +
    '  },' +
    '  "merchant_name": "Plataforma TISS"' +
    '}';


  ExpectedString :=
    'Hello Fulano,' +
    '' +
    'You''ve signed up for Validador TISS (Plano Grátis).' +
    'Now that you''re all signed up, head over to https://www.validadortiss.com.br.' +
    '' +
    'The trial period length of your subscription is 7 days and ends at: 03/31/2021.' +
    '' +
    'The first subsequent transaction for estimated amount of 59 will take place on 03/31/2021.' +
    '' +
    'Please email us if you''d like to cancel your subscription.' +
    '' +
    'Thanks,' +
    'Plataforma TISS';

  CheckEquals(ExpectedString, ParseAndRender(Template, Variables));
end;

procedure AnotherTests.Example1;
begin
  CheckEquals('hi tobi',
    ParseAndRender('hi {{name}}', '{"name":"tobi"}')
  );
end;

procedure AnotherTests.Example2;
begin
  CheckEquals(
    'Introduction',
    ParseAndRender('{{ page.title }}', '{"page":{"title":"Introduction"}}')
  );
end;

procedure AnotherTests.Example3;
begin
  CheckEquals('37',
    ParseAndRender('{{idade}}', '{"idade": 37}')
  );
end;

procedure AnotherTests.HtmlEmail1;
begin
  var Variables :=
    '{' +
    '	"html": {' +
    '		"title": "Email Title"' +
    '	},' +
    '	"email": {' +
    '		"preheader": "Email preheader"' +
    '	},' +
    '	"logo": {' +
    '		"href": "www.bla.com",' +
    '		"alt": "Logo alt",' +
    '		"src": "www.bla.com/logo.jpg"' +
    '	},' +
    '	"content": {' +
    '		"title": "Content title",' +
    '		"message": "Content message",' +
    '		"footer": "Have a nice day :-)"' +
    '	},' +
    '	"button": {' +
    '		"href": "www.bla2.com",' +
    '		"text": "Go!"' +
    '	}' +
    '}';
  var Template := TFile.ReadAllText('..\..\templates\template1.html');
  var ExpectedString := TFile.ReadAllText('..\..\templates\template1_rendered.html');

  CheckEquals(ExpectedString, ParseAndRender(Template, Variables));
end;

procedure AnotherTests.SetUp;
begin
  inherited;
end;

procedure AnotherTests.TearDown;
begin
  inherited;
end;

{ Hash }

procedure Hash.FromJson1;
begin
  var Hash := THash.FromJson(
    '{"name":"tobi"}'
  );
  CheckEquals(1, Hash.Count);
  CheckEquals('name', Hash.ToArray[0].Key);
  CheckEquals('tobi', Hash.ToArray[0].Value.AsString);
end;

procedure Hash.FromJson2;
begin
  var Hash := THash.FromJson(
    '{"page":{"title":"Introduction"}}'
  );
//  try
    CheckEquals(1, Hash.Count);
    CheckEquals('page', Hash.ToArray[0].Key);
    CheckTrue(Hash.ToArray[0].Value.IsType<IHash>);

    var Pair := Hash.ToArray[0].Value.AsType<IHash>.ToArray[0];

    CheckEquals('title', Pair.Key);
    CheckEquals('Introduction', Pair.Value.AsString);
//  finally
//    Hash.Free;
//  end;
end;

procedure Hash.FromJson3;
begin
  var Hash := THash.FromJson(
    '{"age": 37}'
  );
//  try
    CheckEquals(1, Hash.Count);
    CheckEquals('age', Hash.ToArray[0].Key);
    CheckEquals(37, Hash.ToArray[0].Value.AsInteger);
//  finally
//    Hash.Free;
//  end;
end;

procedure Hash.FromJson4;
begin
  var Cars: TList<TCar> := TObjectList<TCar>.Create;
  try
    Cars.Add(TCar.Create('Honda', 'Accord'));
    Cars.Add(TCar.Create('Chevrolet', 'Onix'));
    Cars.Add(TCar.Create('Ford', 'Explorer'));
    var Json := Format(
      '{' +
      '  "owner": "Bob",' +
      '  "age": 29,' +
      '  "array": %0:s,' +
      '  "first": %1:s,' +
      '  "last": %2:s,' +
      '  "clone": %1:s,' +
      '  "camry": %2:s' +
      '}',
      [SerializeArray<TCar>(Cars.ToArray),
       SerializeObj(Cars.First), SerializeObj(Cars.Last)]
    );
    var Hash := THash.FromJson(Json);
    try
      CheckEquals(7, Hash.Count);

      CheckEquals('Bob', Hash['owner'].AsString);
      CheckEquals(29, Hash['age'].AsInteger);

      CheckTrue(Hash['array'].IsArray);
      CheckEquals(3, Length(Hash['array'].AsType<TArray<TValue>>));
      CheckEquals('Honda', Hash['array'].AsType<TArray<TValue>>[0].AsType<IHash>['Make'].AsString);
      CheckEquals('Accord', Hash['array'].AsType<TArray<TValue>>[0].AsType<IHash>['Model'].AsString);
      CheckEquals('Chevrolet', Hash['array'].AsType<TArray<TValue>>[1].AsType<IHash>['Make'].AsString);
      CheckEquals('Onix', Hash['array'].AsType<TArray<TValue>>[1].AsType<IHash>['Model'].AsString);
      CheckEquals('Ford', Hash['array'].AsType<TArray<TValue>>[2].AsType<IHash>['Make'].AsString);
      CheckEquals('Explorer', Hash['array'].AsType<TArray<TValue>>[2].AsType<IHash>['Model'].AsString);

      CheckTrue(Hash['first'].IsType<IHash>);
      CheckEquals('Honda', Hash['first'].AsType<IHash>['Make'].AsString);
      CheckEquals('Accord', Hash['first'].AsType<IHash>['Model'].AsString);

      CheckTrue(Hash['last'].IsType<IHash>);
      CheckEquals('Ford', Hash['last'].AsType<IHash>['Make'].AsString);
      CheckEquals('Explorer', Hash['last'].AsType<IHash>['Model'].AsString);

      CheckTrue(Hash['clone'].IsType<IHash>);
      CheckEquals('Honda', Hash['clone'].AsType<IHash>['Make'].AsString);
      CheckEquals('Accord', Hash['clone'].AsType<IHash>['Model'].AsString);

      CheckTrue(Hash['camry'].IsType<IHash>);
      CheckEquals('Ford', Hash['camry'].AsType<IHash>['Make'].AsString);
      CheckEquals('Explorer', Hash['camry'].AsType<IHash>['Model'].AsString);
    finally
//      Hash.Free;
    end;
  finally
    Cars.Free;
  end;
end;

procedure Hash.JsonArray;
begin
  var Hash := THash.FromJson(
    '{"array":["a","","b"]}'
  );
  CheckEquals(1, Hash.Count);
  CheckEquals('array', Hash.ToArray[0].Key);
  CheckTrue(Hash.ToArray[0].Value.IsType<TArray<TValue>>);

  var ArrayValue := Hash.ToArray[0].Value.AsType<TArray<TValue>>;
  CheckTrue(ArrayValue[0].IsType<string>);
  CheckEquals('a', ArrayValue[0].AsType<string>);

  CheckTrue(ArrayValue[1].IsType<string>);
  CheckEquals('', ArrayValue[1].AsType<string>);

  CheckTrue(ArrayValue[2].IsType<string>);
  CheckEquals('b', ArrayValue[2].AsType<string>);
end;

procedure Hash.JsonWithDate;
begin
  var Hash := THash.FromJson(
    '{"date":"2013-12-25"}'
  );
  CheckEquals(1, Hash.Count);
  CheckEquals('date', Hash.ToArray[0].Key);
  CheckTrue(Hash.ToArray[0].Value.IsType<TDate>);
end;

procedure Hash.JsonWithDateTime;
begin
  var Hash := THash.FromJson(
    '{"date":"2013-12-25T12:12"}'
  );
  CheckEquals(1, Hash.Count);
  CheckEquals('date', Hash.ToArray[0].Key);
  CheckTrue(Hash.ToArray[0].Value.IsType<TDateTime>);

  Hash := THash.FromJson(
    '{"date":"2013-12-25T12:12:20.050"}'
  );
  CheckEquals(1, Hash.Count);
  CheckEquals('date', Hash.ToArray[0].Key);
  CheckTrue(Hash.ToArray[0].Value.IsType<TDateTime>);
end;

{ Variables }

procedure Variables.DateTimeVariable;
begin
  var FormatSettings := TFormatSettings.Invariant;
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  SetContext(Context);

  var Json := '{"published_at":"2013-12-25"}';
  CheckTemplateResult('12/25/2013', '{{ published_at }}', Json);

  Json := '{"published_at":"2013-12-25T12:12"}';
  CheckTemplateResult('12/25/2013 12:12:00', '{{ published_at }}', Json);

  Json := '{"published_at":"2013-12-25T12:12:20.050"}';
  CheckTemplateResult('12/25/2013 12:12:20', '{{ published_at }}', Json);

  FormatSettings := TFormatSettings.Invariant;
  FormatSettings.DateSeparator := '-';
  FormatSettings.TimeSeparator := ';';
  Context := TLiquidContext.Create(FormatSettings);
  SetContext(Context);

  Json := '{"published_at":"2013-12-25"}';
  CheckTemplateResult('12-25-2013', '{{ published_at }}', Json);

  Json := '{"published_at":"2013-12-25T12:12"}';
  CheckTemplateResult('12-25-2013 12;12;00', '{{ published_at }}', Json);

  Json := '{"published_at":"2013-12-25T12:12:20.050"}';
  CheckTemplateResult('12-25-2013 12;12;20', '{{ published_at }}', Json);
end;

procedure Variables.SetUp;
begin
  inherited;

end;

procedure Variables.TearDown;
begin
  inherited;
end;

procedure Variables.TestVariable;
begin
  CheckEquals(' bmw ',
    ParseAndRender(
      ' {{best_cars}} ',
      '{' +
      '  "best_cars": "bmw",' +
      '  "car": {"bmw":"good", "gm":"bad"},' +
      '  "number": 3.145' +
      '}'
    ));
end;

procedure Variables.VariableWithFilter;
begin
  CheckEquals(' bmw ',
    ParseAndRender(
      ' {{best_cars | bla}} ',
      '{' +
      '  "best_cars": "bmw",' +
      '  "car": {"bmw":"good", "gm":"bad"},' +
      '  "number": 3.145' +
      '}'
    ));
end;

{ Template }

procedure Template.InstanceAssignsPersistOnSameTemplateObjectBetweenParses;
begin
  CheckTemplateResult(
    'from instance assigns',
    '{% assign foo = "from instance assigns" %}{{ foo }}'
  );

//  raise Exception.Create('Error Message');
//  Template.Parse('{{ foo }}').Render;
//  Template.s

//  CheckEquals(
//    'from instance assigns',
//    Template.Parse('{{ foo }}').Render
//  );
end;

procedure Template.SetUp;
begin
  inherited;
//  Template := TInternalLiquidTemplate(TLiquidTemplate.Create);
end;

procedure Template.TearDown;
begin
  inherited;
//  Template.Free;
end;

procedure Template.TokenizeBlocks;
begin
  var Tokens := Template.Tokenize('{%comment%}');
  try
    CheckEquals(1, Tokens.Count);
    CheckEquals('{%comment%}', Tokens[0]);
  finally
    Tokens.Free;
  end;

  Tokens := Template.Tokenize(' {%comment%} ');
  try
    CheckEquals(3, Tokens.Count);
    CheckEquals(' ', Tokens[0]);
    CheckEquals('{%comment%}', Tokens[1]);
    CheckEquals(' ', Tokens[2]);
  finally
    Tokens.Free;
  end;

  Tokens := Template.Tokenize(' {%comment%} {%endcomment%} ');
  try
    CheckEquals(5, Tokens.Count);
    CheckEquals(' ', Tokens[0]);
    CheckEquals('{%comment%}', Tokens[1]);
    CheckEquals(' ', Tokens[2]);
    CheckEquals('{%endcomment%}', Tokens[3]);
    CheckEquals(' ', Tokens[4]);
  finally
    Tokens.Free;
  end;

  Tokens := Template.Tokenize('  {% comment %} {% endcomment %} ');
  try
    CheckEquals(5, Tokens.Count);
    CheckEquals('  ', Tokens[0]);
    CheckEquals('{% comment %}', Tokens[1]);
    CheckEquals(' ', Tokens[2]);
    CheckEquals('{% endcomment %}', Tokens[3]);
    CheckEquals(' ', Tokens[4]);
  finally
    Tokens.Free;
  end;
end;

procedure Template.TokenizeStrings;
begin
  var Tokens := Template.Tokenize(' ');
  try
    CheckEquals(1, Tokens.Count);
    CheckEquals(' ', Tokens[0]);
  finally
    Tokens.Free;
  end;

  Tokens := Template.Tokenize('hello world');
  try
    CheckEquals(1, Tokens.Count);
    CheckEquals('hello world', Tokens[0]);
  finally
    Tokens.Free;
  end;
end;

procedure Template.TokenizeVariables;
begin
  var Tokens := Template.Tokenize('{{funk}}');
  try
    CheckEquals(1, Tokens.Count);
    CheckEquals('{{funk}}', Tokens[0]);
  finally
    Tokens.Free;
  end;

  Tokens := Template.Tokenize(' {{funk}} ');
  try
    CheckEquals(3, Tokens.Count);
    CheckEquals(' ', Tokens[0]);
    CheckEquals('{{funk}}', Tokens[1]);
    CheckEquals(' ', Tokens[2]);
  finally
    Tokens.Free;
  end;

  Tokens := Template.Tokenize(' {{funk}} {{so}} {{brother}} ');
  try
    CheckEquals(7, Tokens.Count);
    CheckEquals(' ', Tokens[0]);
    CheckEquals('{{funk}}', Tokens[1]);
    CheckEquals(' ', Tokens[2]);
    CheckEquals('{{so}}', Tokens[3]);
    CheckEquals(' ', Tokens[4]);
    CheckEquals('{{brother}}', Tokens[5]);
    CheckEquals(' ', Tokens[6]);
  finally
    Tokens.Free;
  end;

  Tokens := Template.Tokenize(' {{  funk  }} ');
  try
    CheckEquals(3, Tokens.Count);
    CheckEquals(' ', Tokens[0]);
    CheckEquals('{{  funk  }}', Tokens[1]);
    CheckEquals(' ', Tokens[2]);
  finally
    Tokens.Free;
  end;
end;

{ Conditions }

procedure Conditions.AndCondition;
begin
  var Condition := TCondition.Create('1', '==', '1');
  CheckTrue(Condition.Evaluate(nil, TFormatSettings.Invariant));

  Condition._And(TCondition.Create('2', '==', '2'));
  CheckTrue(Condition.Evaluate(nil, TFormatSettings.Invariant));

  Condition._And(TCondition.Create('1', '==', '2'));
  CheckFalse(Condition.Evaluate(nil, TFormatSettings.Invariant));

  Condition.Free;
end;

procedure Conditions.Assign_If;
begin
  CheckTemplateResult(
    'This condition will always be true.',

    '{% assign tobi = ''Tobi'' %}' +
    '{% if tobi %}' +
    'This condition will always be true.' +
    '{% endif %}'
  );
end;

procedure Conditions.BasicTemplateResult;
begin
  CheckTemplateResult('TRUE', '{% if true == ''true'' %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('TRUE', '{% if true == "true" %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('FALSE', '{% if false == ''false'' %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('FALSE', '{% if false == "false" %}TRUE{% else %}FALSE{% endif %}');

  CheckTemplateResult('TRUE', '{% if ''true'' == ''true'' %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('TRUE', '{% if ''false'' == ''false'' %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('FALSE', '{% if ''true'' == ''false'' %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('FALSE', '{% if ''false'' == ''true'' %}TRUE{% else %}FALSE{% endif %}');

  CheckTemplateResult('TRUE', '{% if true == true %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('TRUE', '{% if false == false %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('FALSE', '{% if true == false %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('FALSE', '{% if false == true %}TRUE{% else %}FALSE{% endif %}');

  CheckTemplateResult('TRUE', '{% if true %}TRUE{% endif %}');
  CheckTemplateResult('', '{% if false %}TRUE{% endif %}');

  CheckTemplateResult('TRUE', '{% if true %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('FALSE', '{% if false %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('TRUE', '{% if ''1'' == ''1'' %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('FALSE', '{% if ''1'' == ''2'' %}TRUE{% else %}FALSE{% endif %}');

  CheckTemplateResult('TRUE', '{% if true == true %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('FALSE', '{% if true == false %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('TRUE', '{% if false == false %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('FALSE', '{% if false == true %}TRUE{% else %}FALSE{% endif %}');

  CheckTemplateResult('FALSE', '{% if true != true %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('TRUE', '{% if true != false %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('FALSE', '{% if false != false %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('TRUE', '{% if false != true %}TRUE{% else %}FALSE{% endif %}');

  CheckTemplateResult('FALSE', '{% if true <> true %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('TRUE', '{% if true <> false %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('FALSE', '{% if false <> false %}TRUE{% else %}FALSE{% endif %}');
  CheckTemplateResult('TRUE', '{% if false <> true %}TRUE{% else %}FALSE{% endif %}');
end;

procedure Conditions.CharArrays;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  var CharArray := TValue.From<TArray<TValue>>(['A', 'B', 'C']);
  Context['array'] := CharArray;
  Context['first'] := CharArray.AsType<TArray<TValue>>[0];
  Context['last'] := CharArray.AsType<TArray<TValue>>[2];
  SetContext(Context);

  CheckConditionTrue('array', 'contains', '''A''');
  CheckConditionTrue('array', 'contains', 'first');
  CheckConditionTrue('array', 'startsWith', 'first');
  CheckConditionTrue('array.first', '==', 'first');
  CheckConditionFalse('array', 'contains', '''a''');
  CheckConditionFalse('array', 'contains', '''X''');
  CheckConditionTrue('array', 'contains', '''B''');
  CheckConditionTrue('array', 'contains', '''C''');
  CheckConditionTrue('array', 'endsWith', 'last');
end;

procedure Conditions.ClassArrays;
begin
  var Json: string;
  var Cars: TList<TCar> := TObjectList<TCar>.Create;
  var Camry := TCar.Create('Toyota', 'Camry');
  try
    Cars.Add(TCar.Create('Honda', 'Accord'));
    Cars.Add(TCar.Create('Ford', 'Explorer'));
    Json := Format(
      '{' +
      '  "array": %0:s,' +
      '  "first": %1:s,' +
      '  "last": %2:s,' +
      '  "clone": %1:s,' +
      '  "camry": %3:s' +
      '}',
      [SerializeArray<TCar>(Cars.ToArray),
       SerializeObj(Cars.First), SerializeObj(Cars.Last),
       SerializeObj(Camry)]
    );
  finally
    Camry.Free;
    Cars.Free;
  end;
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  SetContext(Context);

  var Hash := THash.FromJson(Json);
  Context.Push(Hash);

  CheckConditionTrue('array', 'contains', 'first');
  CheckConditionTrue('array', 'startsWith', 'first');
  CheckConditionTrue('array.first', '==', 'first');
  CheckConditionTrue('array', 'contains', 'clone');
  CheckConditionTrue('array', 'startsWith', 'clone');
  CheckConditionTrue('array', 'endsWith', 'last');
  CheckConditionFalse('array', 'contains', 'camry');
end;

procedure Conditions.CompareHashes;
begin
  var Json: string;
  var Person1 := TPerson.Create('person 1', []);
  var Person2 := TPerson.Create('person 2', []);
  var Cars: TList<TCar> := TObjectList<TCar>.Create;
  var Person2Cars: TList<TCar> := TObjectList<TCar>.Create;
  try
    Cars.Add(TCar.Create('Honda', 'Accord'));
    Cars.Add(TCar.Create('Chevrolet', 'Onix'));
    Cars.Add(TCar.Create('Ford', 'Explorer'));
    Person2Cars.Add(TCar.Create('Honda', 'Accord'));
    Person2Cars.Add(TCar.Create('Ford', 'Explorer'));

    Person1.Cars := Cars.ToArray;
    Person2.Cars := Person2Cars.ToArray;

    Json := Format(
      '{' +
      '  "owner": "Bob",' +
      '  "age": 29,' +
      '  "array": %0:s,' +
      '  "array2": %1:s,' +
      '  "first": %2:s,' +
      '  "last": %3:s,' +
      '  "clone": %2:s,' +
      '  "camry": %3:s,' +
      '  "array_clone": %0:s,' +
      '  "person1": %4:s,' +
      '  "person1_clone": %4:s,' +
      '  "person2": %5:s' +
      '}',
      [SerializeArray<TCar>(Cars.ToArray),
       SerializeArray<TCar>([Cars.First, Cars.Last]),
       SerializeObj(Cars.First), SerializeObj(Cars.Last),
       SerializeObj(Person1),
       SerializeObj(Person2)]
    );
  finally
    Cars.Free;
    Person1.Free;
    Person2.Free;
    Person2Cars.Free;
  end;

  var Hash := THash.FromJson(Json);
  var First := Hash['array'].AsType<TArray<TValue>>[0];
  var Last := Hash['array'].AsType<TArray<TValue>>[2];

  CheckFalse(EqualVariables(Hash['array'], Hash['owner']));
  CheckFalse(EqualVariables(Hash['array'], Hash['array2']));
  CheckTrue(EqualVariables(Hash['array'], Hash['array_clone']));
  CheckFalse(EqualVariables(Hash['array'], Hash['age']));
  CheckFalse(EqualVariables(Hash['owner'], Hash['array']));
  CheckFalse(EqualVariables(Hash['age'], Hash['array']));
//
  CheckFalse(EqualVariables(Hash['array'], Hash['first']));
  CheckFalse(EqualVariables(Hash['person1'], Hash['array']));
  CheckTrue(EqualVariables(Hash['person1'].AsType<IHash>['Cars'], Hash['array']));
  CheckFalse(EqualVariables(Hash['person1'].AsType<IHash>['Cars'],
    Hash['person2'].AsType<IHash>['Cars']));
  CheckFalse(EqualVariables(Hash['array'], Hash['person1']));
  CheckTrue(EqualVariables(First, Hash['first']));
  CheckTrue(EqualVariables(Last, Hash['last']));
  CheckFalse(EqualVariables(First, Last));
  CheckFalse(EqualVariables(Hash['person1'], Hash['person2']));
  CheckTrue(EqualVariables(Hash['person1'], Hash['person1_clone']));
end;

procedure Conditions.CompareOperator;
begin
  CheckEquals(0, Compare(1, 1));
  CheckEquals(-1, Compare(1, 2));
  CheckEquals(1, Compare(2, 1));
  CheckEquals(0, Compare('1', '1'));
  CheckEquals(-1, Compare('1', '2'));
  CheckEquals(1, Compare('2', '1'));
end;

procedure Conditions.ContainsReturnsFalseForNilCommands;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  SetContext(Context);
  Context.ErrorsOutputMode := TErrorsOutputMode.Suppress;

  CheckConditionFalse('not_assigned', 'contains', '0');
  CheckConditionFalse('0', 'contains', 'not_assigned');
end;

procedure Conditions.ContainsWorksOnDoubleArrays;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  Context['array'] := TValue.From<TArray<TValue>>(
    [1.0, 2.1, 3.25, 4.333, 5.0]);
  SetContext(Context);

  CheckConditionTrue('array', 'contains', '1.0');
  CheckConditionFalse('array', 'contains', '0');
  CheckConditionTrue('array', 'contains', '2.1');
  CheckConditionFalse('array', 'contains', '3');
  CheckConditionFalse('array', 'contains', '4.33');
  CheckConditionTrue('array', 'contains', '5.00');
  CheckConditionFalse('array', 'contains', '6');

  CheckConditionFalse('array', 'contains', '''1''');
end;

procedure Conditions.ContainsWorksOnIntArrays;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  Context['array'] := TValue.From<TArray<TValue>>([1, 2, 3, 4, 5]);
  SetContext(Context);

  CheckConditionTrue('array', 'contains', '1');
  CheckConditionFalse('array', 'contains', '0');
  CheckConditionTrue('array', 'contains', '2');
  CheckConditionTrue('array', 'contains', '3');
  CheckConditionTrue('array', 'contains', '4');
  CheckConditionTrue('array', 'contains', '5');
  CheckConditionFalse('array', 'contains', '6');

  // testing for equality cross integer and string boundaries
  // resulted in not equal.
  CheckConditionFalse('array', 'contains', '''1''');
end;

procedure Conditions.ContainsWorksOnLongArrays;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  Context['array'] := TValue.From<TArray<TValue>>([1.0, 2.0, 3.0, 4.0, 5.0]);
  SetContext(Context);

  CheckConditionFalse('array', 'contains', '0');
  CheckConditionTrue('array', 'contains', '1');
  CheckConditionTrue('array', 'contains', '1.0');
  CheckConditionTrue('array', 'contains', '2');
  CheckConditionTrue('array', 'contains', '2.0');
  CheckConditionTrue('array', 'contains', '3');
  CheckConditionTrue('array', 'contains', '3.0');
  CheckConditionTrue('array', 'contains', '4');
  CheckConditionTrue('array', 'contains', '4.0');
  CheckConditionTrue('array', 'contains', '5');
  CheckConditionTrue('array', 'contains', '5.0');
  CheckConditionFalse('array', 'contains', '6');
  CheckConditionFalse('array', 'contains', '6.0');

  // testing for equality cross integer and string boundaries
  // resulted in not equal.
  CheckConditionFalse('array', 'contains', '''1''');
end;

procedure Conditions.ContainsWorksOnStrings;
begin
  CheckConditionTrue('''bob''', 'contains', '''o''');
  CheckConditionTrue('''bob''', 'contains', '''b''');
  CheckConditionTrue('''bob''', 'contains', '''bo''');
  CheckConditionTrue('''bob''', 'contains', '''ob''');
  CheckConditionTrue('''bob''', 'contains', '''bob''');

  CheckConditionFalse('''bob''', 'contains', '''bob2''');
  CheckConditionFalse('''bob''', 'contains', '''a''');
  CheckConditionFalse('''bob''', 'contains', '''---''');
end;

procedure Conditions.DefaultOperatorsEvaluateFalse;
begin
  CheckConditionFalse('1', '==', '2');
  CheckConditionFalse('1', '!=', '1');
  CheckConditionFalse('1', '<>', '1');
  CheckConditionFalse('1', '<', '0');
  CheckConditionFalse('2', '>', '4');
  CheckConditionFalse('1', '>=', '3');
  CheckConditionFalse('2', '>=', '4');
  CheckConditionFalse('1', '<=', '0');
  CheckConditionFalse('1', '<=', '0');
end;

procedure Conditions.DefaultOperatorsEvaluateTrue;
begin
  CheckConditionTrue('1', '==', '1');
  CheckConditionTrue('1', '!=', '2');
  CheckConditionTrue('1', '<>', '2');
  CheckConditionTrue('1', '<', '2');
  CheckConditionTrue('2', '>', '1');
  CheckConditionTrue('1', '>=', '1');
  CheckConditionTrue('2', '>=', '1');
  CheckConditionTrue('1', '<=', '2');
  CheckConditionTrue('1', '<=', '1');
end;

procedure Conditions.EndsWithReturnsFalseForNilCommands;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  SetContext(Context);
  Context.ErrorsOutputMode := TErrorsOutputMode.Suppress;

  CheckConditionFalse('not_assigned', 'endswith', '0');
  CheckConditionFalse('0', 'endswith', 'not_assigned');
end;

procedure Conditions.EndsWithWorksOnArrays;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  Context['array'] := TValue.From<TArray<TValue>>([1, 2, 3, 4, 5]);
  SetContext(Context);

  CheckConditionFalse('array', 'endswith', '0');
  CheckConditionFalse('array', 'endswith', '1');
  CheckConditionTrue('array', 'endswith', '5');
end;

procedure Conditions.EndsWithWorksOnStrings;
begin
  CheckConditionTrue('''dave''', 'endswith', '''e''');
  CheckConditionTrue('''dave''', 'endswith', '''ve''');
  CheckConditionTrue('''dave''', 'endswith', '''ave''');
  CheckConditionTrue('''dave''', 'endswith', '''dave''');

  CheckConditionFalse('''dave''', 'endswith', '''dav''');
  CheckConditionFalse('''dave''', 'endswith', '''d''');
  CheckConditionFalse('''dave''', 'endswith', '''---''');
end;

procedure Conditions.HasKey;
begin
  var Json :=
    '{' +
    '  "dave": "0",' +
    '  "bob": "4"' +
    '}';
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  SetContext(Context);
  var Hash := THash.FromJson(Json);
  Context['dictionary'] := TValue.From<IHash>(Hash);

  CheckConditionFalse('dictionary', 'haskey', '0');
  CheckConditionTrue('dictionary', 'haskey', '''bob''');
  CheckConditionFalse('dictionary', 'haskey', '''0''');
end;

procedure Conditions.HasValue;
begin
  var Json :=
    '{' +
    '  "dave": "0",' +
    '  "bob": "4"' +
    '}';
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  SetContext(Context);
  var Hash := THash.FromJson(Json);
  Context['dictionary'] := TValue.From<IHash>(Hash);;

  CheckConditionTrue('dictionary', 'hasvalue', '''0''');
  CheckConditionFalse('dictionary', 'hasvalue', '''bob''');
end;

procedure Conditions.OrCondition;
begin
  var Condition := TCondition.Create('1', '==', '2');
  CheckFalse(Condition.Evaluate(nil, TFormatSettings.Invariant));

  Condition._Or(TCondition.Create('2', '==', '1'));
  CheckFalse(Condition.Evaluate(nil, TFormatSettings.Invariant));

  Condition._Or(TCondition.Create('1', '==', '1'));
  CheckTrue(Condition.Evaluate(nil, TFormatSettings.Invariant));

  Condition.Free;
end;

procedure Conditions.SetUp;
begin
  inherited;

end;

procedure Conditions.StartsWithReturnsFalseForNilCommands;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  SetContext(Context);
  Context.ErrorsOutputMode := TErrorsOutputMode.Suppress;

  CheckConditionFalse('not_assigned', 'startswith', '0');
  CheckConditionFalse('0', 'startswith', 'not_assigned');
end;

procedure Conditions.StartsWithWorksOnArrays;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  Context['array'] := TValue.From<TArray<TValue>>([1, 2, 3, 4, 5]);
  SetContext(Context);

  CheckConditionFalse('array', 'startswith', '0');
  CheckConditionTrue('array', 'startswith', '1');
  CheckConditionFalse('array', 'startswith', '5');
end;

procedure Conditions.StartsWithWorksOnStrings;
begin
  CheckConditionTrue('''dave''', 'startswith', '''d''');
  CheckConditionTrue('''dave''', 'startswith', '''da''');
  CheckConditionTrue('''dave''', 'startswith', '''dav''');
  CheckConditionTrue('''dave''', 'startswith', '''dave''');

  CheckConditionFalse('''dave''', 'startswith', '''ave''');
  CheckConditionFalse('''dave''', 'startswith', '''e''');
  CheckConditionFalse('''dave''', 'startswith', '''---''');
end;

procedure Conditions.StringArrays;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  var StringArray := TValue.From<TArray<TValue>>(['Apple', 'Orange', '', 'Banana']);
  Context['array'] := StringArray;
  Context['first'] := StringArray.AsType<TArray<TValue>>[0];
  Context['last'] := StringArray.AsType<TArray<TValue>>[3];
  SetContext(Context);

  CheckConditionTrue('array', 'startsWith', '''Apple''');
  CheckConditionTrue('array', 'endsWith', '''Banana''');
  CheckConditionTrue('array', 'contains', '''Apple''');
  CheckConditionTrue('array', 'startsWith', 'first');
  CheckConditionTrue('array.first', '==', '''Apple''');
  CheckConditionTrue('array.first', '==', 'first');
  CheckConditionFalse('array', 'contains', '''apple''');
  CheckConditionFalse('array', 'startsWith', '''apple''');
  CheckConditionFalse('array.first', '==', '''apple''');
  CheckConditionFalse('array', 'contains', '''Mango''');
  CheckConditionTrue('array', 'contains', '''Orange''');
  CheckConditionTrue('array', 'contains', '''Banana''');
  CheckConditionTrue('array', 'endsWith', 'last');
  CheckConditionFalse('array', 'contains', '''Orang''');
end;

procedure Conditions.TearDown;
begin
  inherited;

end;

procedure Conditions.TruthyArrays;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  var StringArray := TValue.From<TArray<TValue>>([true]);
  Context['array'] := StringArray;
  Context['first'] := StringArray.AsType<TArray<TValue>>[0];
  SetContext(Context);

  CheckConditionTrue('array', 'contains', 'first');
  CheckConditionTrue('array', 'startsWith', 'first');
  CheckConditionTrue('array.first', '==', '''true''');
  CheckConditionTrue('array', 'startsWith', '''true''');
  CheckConditionTrue('array', 'contains', '''true''');
end;

{ LiquidBaseTestCase }

procedure LiquidBaseTestCase.CheckCondition(Expected: boolean; const Left,
  _Operator, Right: string);
begin
  var Condition := TCondition.Create(Left, _Operator, Right);
  try
    if Expected then
      CheckTrue(Condition.Evaluate(FContext, TFormatSettings.Invariant),
        Format('Evaluated false: %s %s %s', [Left, _Operator, Right]))
    else
      CheckFalse(Condition.Evaluate(FContext, TFormatSettings.Invariant),
        Format('Evaluated true: %s %s %s', [Left, _Operator, Right]));
  finally
    Condition.Free;
  end;
end;

procedure LiquidBaseTestCase.CheckConditionFalse(const Left, _Operator,
  Right: string);
begin
  CheckCondition(False, Left, _Operator, Right);
end;

procedure LiquidBaseTestCase.CheckConditionTrue(const Left, _Operator,
  Right: string);
begin
  CheckCondition(True, Left, _Operator, Right);
end;

procedure LiquidBaseTestCase.CheckTemplateResult(const Expected, Template,
  JsonVariables: string);
begin
  var Variables := THash.FromJson(JsonVariables);
  var LiquidTemplate := TLiquidTemplate.Parse(Template);
  try
    if FContext = nil then
      FContext := TLiquidContext.Create(TFormatSettings.Invariant);
    FContext.Merge(Variables);
    var Parameters := TRenderParameters.FromContext(FContext, FContext.FormatSettings);
    try
      CheckEquals(Expected, LiquidTemplate.Render(Parameters));
    finally
      Parameters.Free;
    end;
  finally
    LiquidTemplate.Free;
  end;
end;

function LiquidBaseTestCase.Compare(const Left, Right: TValue): integer;
begin
  Result := TInternalConditionOperatorDelegate(
    TConditionOperatorDelegate).Compare(Left, Right);
end;

function LiquidBaseTestCase.EqualVariables(const Left, Right: TValue): boolean;
begin
  Result := TInternalConditionOperatorDelegate(
    TConditionOperatorDelegate).EqualVariables(Left, Right);
end;

procedure LiquidBaseTestCase.CheckTemplateResult(Expected, Template: string);
begin
  var T := TLiquidTemplate.Parse(Template);
  try
    if FContext <> nil then
    begin
      var Parameters := TRenderParameters.FromContext(FContext, FContext.FormatSettings);
      try
        CheckEquals(Expected, T.Render(Parameters));
      finally
        Parameters.Free;
      end;
    end
    else
      CheckEquals(Expected, T.Render);
  finally
    T.Free;
  end;
end;

function LiquidBaseTestCase.SerializeArray<T>(Arr: TArray<T>): string;
var
  JArray: TJSONArray;
  Item: T;
begin
  JArray := TJSONArray.Create;
  try
    for Item in Arr do
      JArray.Add(TJSON.ObjectToJsonObject(Item,
        [joDateIsUTC, joDateFormatISO8601, joBytesFormatArray, joIndentCasePreserve]));
    Result := JArray.ToJSON;
  finally
    JArray.Free;
  end;
end;

function LiquidBaseTestCase.SerializeObj(Obj: TObject): string;
begin
  Result := TJSON.ObjectToJsonString(Obj,
    [joDateIsUTC, joDateFormatISO8601, joBytesFormatArray, joIndentCasePreserve]);
end;

procedure LiquidBaseTestCase.SetContext(Context: ILiquidContext);
begin
  FContext := Context;
end;

procedure LiquidBaseTestCase.SetUp;
begin
  inherited;
  FContext := nil;
end;

procedure LiquidBaseTestCase.TearDown;
begin
  inherited;
  FContext := nil;
end;

{ Assign }

procedure Assign.BasicAssign;
begin
  CheckTemplateResult('bar', '{% assign foo = "bar" %}{{ foo }}');
  CheckTemplateResult('bar', '{% assign foo = ''bar'' %}{{ foo }}');
end;

{ TCar }

constructor TCar.Create(const AMake, AModel: string);
begin
  FMake := AMake;
  FModel := AModel;
end;

{ TPerson }

constructor TPerson.Create(const AName: string; const ACars: TArray<TCar>);
begin
  FName := AName;
  FCars := ACars;
end;

{ _If }

procedure _If.ComparisonsOnArray;
begin
  var Json := '{ "array": [1, 2] }';

  var Template :=
    '{% if array %}NOT EMPTY{% else %}EMPTY{% endif %}';

  CheckTemplateResult('NOT EMPTY', Template, Json);

  Json := '{ "array": [] }';

  CheckTemplateResult('EMPTY', Template, Json);
end;

procedure _If.ComparisonsOnNull;
begin
  CheckTemplateResult('', '{% if null < 10 %} NO {% endif %}');
  CheckTemplateResult('', '{% if null <= 10 %} NO {% endif %}');
  CheckTemplateResult('', '{% if null >= 10 %} NO {% endif %}');
  CheckTemplateResult('', '{% if null > 10 %} NO {% endif %}');

  CheckTemplateResult('', '{% if 10 < null %} NO {% endif %}');
  CheckTemplateResult('', '{% if 10 <= null %} NO {% endif %}');
  CheckTemplateResult('', '{% if 10 >= null %} NO {% endif %}');
  CheckTemplateResult('', '{% if 10 > null %} NO {% endif %}');
end;

procedure _If.ElseIf;
begin
  CheckTemplateResult('0', '{% if 0 == 0 %}0{% elsif 1 == 1%}1{% else %}2{% endif %}');
  CheckTemplateResult('1', '{% if 0 != 0 %}0{% elsif 1 == 1%}1{% else %}2{% endif %}');
  CheckTemplateResult('2', '{% if 0 != 0 %}0{% elsif 1 != 1%}1{% else %}2{% endif %}');

  CheckTemplateResult('elsif', '{% if false %}if{% elsif true %}elsif{% endif %}');
end;

procedure _If.HashMissGeneratesFalse;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  var NewHash: IHash := THash.Create;

  Context['foo'] := TValue.From<IHash>(NewHash);
  SetContext(Context);

  CheckTemplateResult('', '{% if foo.bar %} NO {% endif %}');
end;

procedure _If.IfAnd;
begin
  CheckTemplateResult(' YES ', '{% if true and true %} YES {% endif %}');
  CheckTemplateResult('', '{% if false and true %} YES {% endif %}');
  CheckTemplateResult('', '{% if false and true %} YES {% endif %}');
  CheckTemplateResult(
    'This evaluates to true, since the `and` condition is checked first.',
    '{% if true or false and false %}This evaluates to true, since the `and` condition is checked first.{% endif %}');
  CheckTemplateResult('',
    '{% if true and false and false or true %}This evaluates to false, since the tags are checked like this:{% endif %}');
end;

procedure _If.IfBoolean;
begin
  CheckTemplateResult(' YES ',
    ParseAndRender('{% if var %} YES {% endif %}', '{ "var": true }'));
end;

procedure _If.IfElse;
begin
  CheckTemplateResult(' YES ', '{% if false %} NO {% else %} YES {% endif %}');
  CheckTemplateResult(' YES ', '{% if true %} YES {% else %} NO {% endif %}');
  CheckTemplateResult(' YES ', '{% if ''foo'' %} YES {% else %} NO {% endif %}');
end;

procedure _If.IfFromVariable;
begin
  CheckTemplateResult('', ParseAndRender('{% if var %} NO {% endif %}', '{ "var": false }'));
  CheckTemplateResult('', ParseAndRender('{% if var %} NO {% endif %}', '{ "var": null }'));
  CheckTemplateResult('', ParseAndRender('{% if foo.bar %} NO {% endif %}',
      '{ "foo": { "bar": false } }'));
  CheckTemplateResult('', ParseAndRender('{% if foo.bar %} NO {% endif %}', '{ "foo": null }'));
  CheckTemplateResult('', ParseAndRender('{% if foo.bar %} NO {% endif %}', '{ "foo": true }'));

  CheckTemplateResult(' YES ', ParseAndRender('{% if var %} YES {% endif %}', '{ "var": "text" }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if var %} YES {% endif %}', '{ "var": true }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if var %} YES {% endif %}', '{ "var": 1 }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if var %} YES {% endif %}', '{ "var": {} }'));
  CheckTemplateResult(' YES ', '{% if ''foo'' %} YES {% endif %}');
  CheckTemplateResult(' YES ', ParseAndRender('{% if foo.bar %} YES {% endif %}',
      '{ "foo": { "bar": true } }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if foo.bar %} YES {% endif %}',
      '{ "foo": { "bar": "text" } }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if foo.bar %} YES {% endif %}',
      '{ "foo": { "bar": 1 } }'));

  CheckTemplateResult(' YES ', ParseAndRender('{% if var %} NO {% else %} YES {% endif %}', '{ "var": false }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if var %} NO {% else %} YES {% endif %}', '{ "var": null }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if var %} YES {% else %} NO {% endif %}', '{ "var": true }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if ''foo'' %} YES {% else %} NO {% endif %}', '{ "var": "text" }'));

  CheckTemplateResult(' YES ', ParseAndRender('{% if foo.bar %} NO {% else %} YES {% endif %}',
      '{ "foo": { "bar": false } }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if foo.bar %} YES {% else %} NO {% endif %}',
      '{ "foo": { "bar": true } }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if foo.bar %} YES {% else %} NO {% endif %}',
      '{ "foo": { "bar": "text" } }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if foo.bar %} NO {% else %} YES {% endif %}',
      '{ "foo": { "notbar": true } }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if foo.bar %} NO {% else %} YES {% endif %}',
      '{ "notfoo": { "bar": true } }'));
  CheckTemplateResult(' YES ',
    ParseAndRender('{% if foo.bar %} YES {% endif %}',
      '{ "foo": { "bar": {} } }'));

  CheckTemplateResult('', ParseAndRender('{% if foo.bar %} NO {% endif %}', '{ "foo": {} }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if var %} YES {% endif %}', '{ "var": {} }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if foo.bar %} YES {% endif %}',
      '{ "foo": { "bar": {} } }'));
  CheckTemplateResult(' YES ', ParseAndRender('{% if foo.bar %} NO {% else %} YES {% endif %}',
      '{ "foo": {} }'));
end;

procedure _If.IfMaxConditions;
begin
  var Template := '{% if ';
  for var I := 1 to 600 do
    Template := Template + '1 and ';
  Template := Template + '1 %}too many conditions{% endif %}';

  try
    CheckTemplateResult('', Template);
    Fail('ELiquidSyntaxException expected');
  except
    on E: ELiquidSyntaxException do
    begin
      E.Message.Contains('''if''');
      E.Message.Contains('tag');
      E.Message.Contains('500');
    end;
  end;
end;

procedure _If.IfOr;
begin
  CheckTemplateResult(' YES ',
    ParseAndRender('{% if a or b %} YES {% endif %}', '{ "a": true, "b": true }'));
  CheckTemplateResult(' YES ',
    ParseAndRender('{% if a or b %} YES {% endif %}', '{ "a": true, "b": false }'));
  CheckTemplateResult(' YES ',
    ParseAndRender('{% if a or b %} YES {% endif %}', '{ "a": false, "b": true }'));
  CheckTemplateResult('',
    ParseAndRender('{% if a or b %} YES {% endif %}', '{ "a": false, "b": false }'));

  CheckTemplateResult(' YES ',
    ParseAndRender('{% if a or b or c %} YES {% endif %}',
      '{ "a": false, "b": false, "c": true }'));

  CheckTemplateResult('',
    ParseAndRender('{% if a or b or c %} YES {% endif %}',
      '{ "a": false, "b": false, "c": false }'));
end;

procedure _If.IfWithOperator;
begin
  CheckTemplateResult(' YES ',
    ParseAndRender(
      '{% if a == true or b == true %} YES {% endif %}',
      '{ "a": true, "b": true }'));
 CheckTemplateResult(' YES ',
   ParseAndRender(
     '{% if a == true or b == false %} YES {% endif %}',
     '{ "a": true, "b": true }'));
 CheckTemplateResult('',
   ParseAndRender(
     '{% if a == false or b == false %} YES {% endif %}',
     '{ "a": true, "b": true }'));
end;

procedure _If.NestedIf;
begin
  CheckTemplateResult('', '{% if false %}{% if false %} NO {% endif %}{% endif %}');
  CheckTemplateResult('', '{% if false %}{% if true %} NO {% endif %}{% endif %}');
  CheckTemplateResult('', '{% if true %}{% if false %} NO {% endif %}{% endif %}');
  CheckTemplateResult(' YES ', '{% if true %}{% if true %} YES {% endif %}{% endif %}');

  CheckTemplateResult(' YES ',
    '{% if true %}{% if true %} YES {% else %} NO {% endif %}{% else %} NO {% endif %}');
  CheckTemplateResult(' YES ',
    '{% if true %}{% if false %} NO {% else %} YES {% endif %}{% else %} NO {% endif %}');
  CheckTemplateResult(' YES ',
    '{% if false %}{% if true %} NO {% else %} NONO {% endif %}{% else %} YES {% endif %}');
end;

procedure _If.SyntaxErrorNoExpression;
begin
  StartExpectingException(ELiquidSyntaxException);
  CheckTemplateResult('', '{% if %}');
  StopExpectingException;
end;

//procedure _If.SyntaxErrorNoVariable;
//begin
//  StartExpectingException(ELiquidSyntaxException);
//  CheckTemplateResult('', '{% if jerry == 1 %}');
//  StopExpectingException;
//end;

procedure _If.TestIf;
begin
  CheckTemplateResult('  ', ' {% if false %} this text should not go into the output {% endif %} ');
  CheckTemplateResult('  this text should go into the output  ', ' {% if true %} this text should go into the output {% endif %} ');
  CheckTemplateResult('  you rock ?', '{% if false %} you suck {% endif %} {% if true %} you rock {% endif %}?');
end;

{ _For }

procedure _For.ArrayOfObjects;
begin
  var Json :=
    '{' +
    '  "header": "Colors",' +
    '  "items": [' +
    '      {"name": "red", "first": true, "url": "#Red"},' +
    '      {"name": "green", "link": true, "url": "#Green"},' +
    '      {"name": "blue", "link": true, "url": "#Blue"}' +
    '  ]' +
    '}';

  var Template :=
    '<h1>{{header}}</h1>' +
    '{% if items %}' +
    '{% for i in items %}' +
    '{% if i.first %}' +
    '<li><strong>{{i.name}}</strong></li>' +
    '{% else %}' +
    '<li><a href="{{i.url}}">{{i.name}}</a></li>' +
    '{% endif %}' +
    '{% endfor %}' +
    '{% else %}' +
    '<p>The list is empty.</p>' +
    '{% endif %}';


  CheckTemplateResult(
    '<h1>Colors</h1>' +
    '<li><strong>red</strong></li>' +
    '<li><a href="#Green">green</a></li>' +
    '<li><a href="#Blue">blue</a></li>',
    Template, Json
  );


//  Json :=
//    '{' +
//    '  "header": "Colors",' +
//    '  "items": []' +
//    '}';
//
//  CheckTemplateResult(
//    '<h1>Colors</h1>' +
//    '<p>The list is empty.</p>',
//    Template, Json
//  );
end;

procedure _For.BreakOutsideFor;
begin
  CheckTemplateResult('123', '123{% break %}456');
end;

procedure _For.ContinueOutsideFor;
begin
  CheckTemplateResult('123', '123{% continue %}456');
end;

procedure _For.DynamicVariableLimiting;
begin
  var Json :=
    '{' +
    ' "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0],' +
    ' "limit": 2,' +
    ' "offset": 2' +
    '}';

  CheckTemplateResult('34',
    '{%for i in array limit: limit offset: offset %}{{ i }}{%endfor%}', Json);
end;

procedure _For.ForAndIf;
begin
  CheckTemplateResult('+--',
    '{%for item in array%}{% if forloop.first %}+{% else %}-{% endif %}{%endfor%}',
    '{ "array": [1, 2, 3 ] }');
end;

procedure _For.ForElse;
begin
  var Json :=
    '{ "array": [] }';

  CheckTemplateResult('empty array',
    '{%for i in array %}{{ i }}{% else %}empty array{%endfor%}', Json);

  Json :=
    '{ "array": [1, 2] }';

  CheckTemplateResult('12',
    '{%for i in array %}{{ i }}{% else %}empty array{%endfor%}', Json);
end;

procedure _For.ForHelpers;
begin
  var Variables := '{ "array": [ 1, 2, 3 ] }';

  CheckTemplateResult(' 1/3  2/3  3/3 ',
      '{%for item in array%} {{forloop.index}}/{{forloop.length}} {%endfor%}', Variables);

  CheckTemplateResult(' 1  2  3 ',
    '{%for item in array%} {{forloop.index}} {%endfor%}', Variables);

  CheckTemplateResult(' 0  1  2 ',
    '{%for item in array%} {{forloop.index0}} {%endfor%}', Variables);

  CheckTemplateResult(' 2  1  0 ',
    '{%for item in array%} {{forloop.rindex0}} {%endfor%}', Variables);

  CheckTemplateResult(' 3  2  1 ',
    '{%for item in array%} {{forloop.rindex}} {%endfor%}', Variables);

  CheckTemplateResult(' true  false  false ',
    '{%for item in array%} {{forloop.first}} {%endfor%}', Variables);

  CheckTemplateResult(' false  false  true ',
    '{%for item in array%} {{forloop.last}} {%endfor%}', Variables);
end;

procedure _For.ForWithBreak;
begin
  var Json := '{ "array": {"items": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]} }';
  var Template := '{% for i in array.items %}{{ i }}{% if i > 3 %}{% break %}{% endif %}{% endfor %}';
  var Expected := '1234';
  CheckTemplateResult(Expected, Template, Json);
end;

procedure _For.ForWithContinue;
begin
  var Json := '{ "array": {"items": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]} }';

  var Template := '{% for i in array.items %}{% if i == 1 %}{% continue %}{% endif %}{{ i }}{% endfor %}';
  var Expected := '2345678910';
  CheckTemplateResult(Expected, Template, Json);

  Template := '{% for i in array.items %}{% if i == 3 %}{% continue %}{% endif %}{{ i }}{% endfor %}';
  Expected := '1245678910';
  CheckTemplateResult(Expected, Template, Json);
end;

procedure _For.ForWithVariable;
begin
  CheckTemplateResult(' 1  2  3 ',
    '{%for item in array%} {{item}} {%endfor%}',
    '{ "array": [ 1, 2, 3 ] }');

  CheckTemplateResult('123',
    '{%for item in array%}{{item}}{%endfor%}',
    '{ "array": [ 1, 2, 3 ] }');

  CheckTemplateResult('123',
    '{% for item in array %}{{item}}{% endfor %}',
    '{ "array": [ 1, 2, 3 ] }');

  CheckTemplateResult('abcd',
    '{%for item in array%}{{item}}{%endfor%}',
    '{ "array": [ "a", "b", "c", "d" ] }');

  CheckTemplateResult('a b c', '{%for item in array%}{{item}}{%endfor%}',
      '{ "array": [ "a", " ", "b", " ", "c" ] }');

  CheckTemplateResult('abc', '{%for item in array%}{{item}}{%endfor%}',
      '{ "array": [ "a", "", "b", "", "c" ] }');
end;

procedure _For.Limiting;
begin
  var Json := '{ "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] }';

  CheckTemplateResult('12', '{%for i in array limit:2 %}{{ i }}{%endfor%}', Json);

  CheckTemplateResult('1234', '{%for i in array limit:4 %}{{ i }}{%endfor%}', Json);

  CheckTemplateResult('3456',
    '{%for i in array limit:4 offset:2 %}{{ i }}{%endfor%}', Json);

  CheckTemplateResult(
    '3456', '{%for i in array limit: 4 offset: 2 %}{{ i }}{%endfor%}', Json);
end;

procedure _For.NestedFor;
begin
  var Json := '{"array":[ [1, 2 ], [3, 4], [5, 6] ] }';
  CHeckTemplateResult('123456',
    '{%for item in array%}{%for i in item%}{{ i }}{%endfor%}{%endfor%}', Json);
end;

procedure _For.OffsetSetOnly;
begin
  var Json := '{ "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] }';

  CheckTemplateResult('890', '{%for i in array offset:7 %}{{ i }}{%endfor%}', Json);
end;

procedure _For.PauseResume;
begin
  var Json := '{ "array": {"items":[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]} }';

  var Template :=
    '{%for i in array.items limit: 3 %}{{i}}{%endfor%}' + #13#10 +
    'next' + #13#10 +
    '{%for i in array.items offset:continue limit: 3 %}{{i}}{%endfor%}' + #13#10 +
    'next' + #13#10 +
    '{%for i in array.items offset:continue limit: 3 %}{{i}}{%endfor%}';

  var Expected :=
    '123' + #13#10 +
    'next' + #13#10 +
    '456' + #13#10 +
    'next' + #13#10 +
    '789';

  CheckTemplateResult(Expected, Template, Json);
end;

procedure _For.PauseResumeBigLimit;
begin
  var Json := '{ "array": {"items":[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]} }';

  var Template :=
    '{%for i in array.items limit:3 %}{{i}}{%endfor%}' + #13#10 +
    'next' + #13#10 +
    '{%for i in array.items offset:continue limit:3 %}{{i}}{%endfor%}' + #13#10 +
    'next' + #13#10 +
    '{%for i in array.items offset:continue limit:1000 %}{{i}}{%endfor%}';

  var Expected :=
    '123' + #13#10 +
    'next' + #13#10 +
    '456' + #13#10 +
    'next' + #13#10 +
    '7890';

  CheckTemplateResult(Expected, Template, Json);
end;

procedure _For.PauseResumeBigOffset;
begin
  var Json := '{ "array": {"items":[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]} }';

  var Template :=
    '{%for i in array.items limit:3 %}{{i}}{%endfor%}' + #13#10 +
    'next' + #13#10 +
    '{%for i in array.items offset:continue limit:3 %}{{i}}{%endfor%}' + #13#10 +
    'next' + #13#10 +
    '{%for i in array.items offset:continue limit:1000 offset:1000 %}{{i}}{%endfor%}';

  var Expected :=
    '123' + #13#10 +
    'next' + #13#10 +
    '456' + #13#10 +
    'next' + #13#10 +
    '';

  CheckTemplateResult(Expected, Template, Json);
end;

procedure _For.PauseResumeLimit;
begin
  var Json := '{ "array": {"items":[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]} }';

  var Template :=
    '{%for i in array.items limit: 3 %}{{i}}{%endfor%}' + #13#10 +
    'next' + #13#10 +
    '{%for i in array.items offset:continue limit: 3 %}{{i}}{%endfor%}' + #13#10 +
    'next' + #13#10 +
    '{%for i in array.items offset:continue limit: 1 %}{{i}}{%endfor%}';

  var Expected :=
    '123' + #13#10 +
    'next' + #13#10 +
    '456' + #13#10 +
    'next' + #13#10 +
    '7';

  CheckTemplateResult(Expected, Template, Json);
end;

procedure _For.TestFor;
begin
  CheckTemplateResult(' yo  yo  yo  yo ',
    '{%for item in array%} yo {%endfor%}',
    '{"array":[1, 2, 3, 4]}');

  CheckTemplateResult('yoyo',
    '{%for item in array%}yo{%endfor%}',
    '{"array":[1, 2]}');

  CheckTemplateResult(' yo ',
    '{%for item in array%} yo {%endfor%}',
    '{"array":[1]}');

  CheckTemplateResult('',
    '{%for item in array%}{%endfor%}',
    '{"array": [1, 2]}');
end;

{ StandardFilters }

procedure StandardFilters.Append;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  SetContext(Context);

  CheckTemplateResult('ABC', '{{ "A" | append: "B" | append: "C" }}');

  Context['var1'] := 'AB';
  Context['var2'] := 'c';
  CheckTemplateResult('ABC', '{{ var1 | append: var2 | upcase }}');
  CheckTemplateResult('cab', '{{ var2 | append: var1 | downcase }}');

  CheckTemplateResult('website.com/index.html',
    '{% assign filename = "/index.html" %}' +
    '{{ "WEBSITE.COM" | append: filename | downcase }}'
  );

  CheckTemplateResult('a', '{{ unknown | append: "a" }}');
  CheckTemplateResult('5', '{{ 5 | append: 1 }}');
  CheckTemplateResult('5', '{{ 5 | append: "a" }}');
  CheckTemplateResult('0', '{{ 0 | append: "a" }}');
  CheckTemplateResult('false', '{{ false | append: "a" }}');
end;

procedure StandardFilters.Date;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  SetContext(Context);

  var Json := '{"published_at":"2000-06-05"}';
  CheckTemplateResult('05/06/2000', '{{ published_at | date: "dd/mm/yyyy"}}', Json);
  CheckTemplateResult('Mon 5 of Jun 2000', '{{ published_at | date: "ddd d of mmm yyyy"}}', Json);

  Json := '{"published_at":"2000-06-05T01:02"}';
  CheckTemplateResult('06/05/2000 01:02:00', '{{ published_at | date: "c"}}', Json);
  CheckTemplateResult('01:02:00', '{{ published_at | date: "tt"}}', Json);
  CheckTemplateResult('05/06/2000 01:02:00.000', '{{ published_at | date: "dd/mm/yyyy hh:mm:ss.zzz"}}', Json);

  Json := '{"published_at":"2000-06-05T01:02:03.004"}';
  CheckTemplateResult('06/05/2000 01:02:03', '{{ published_at | date: "c"}}', Json);
  CheckTemplateResult('01:02:03', '{{ published_at | date: "tt"}}', Json);
  CheckTemplateResult('05/06/2000 01:02:03.004', '{{ published_at | date: "dd/mm/yyyy hh:mm:ss.zzz"}}', Json);
end;

procedure StandardFilters.Default;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  SetContext(Context);

  CheckTemplateResult('test', '{{ "test" | default: "tobi" }}');
  CheckTemplateResult('tobi', '{{ "" | default: "tobi" }}');
  CheckTemplateResult('test', '{{ "test" | default: ''tobi'' }}');
  CheckTemplateResult('tobi', '{{ "" | default: ''tobi'' }}');
  CheckTemplateResult('test', '{{ ''test'' | default: "tobi" }}');
  CheckTemplateResult('tobi', '{{ '''' | default: "tobi" }}');
  CheckTemplateResult('5', '{{ 5 | default: "tobi" }}');
  CheckTemplateResult('0', '{{ 0 | default: "tobi" }}');
  CheckTemplateResult('false', '{{ false | default: true }}');
  CheckTemplateResult('tobi', '{{ null | default: "tobi" }}');
  CheckTemplateResult('', '{{ null | default: false }}');
  CheckTemplateResult('', '{{ null | default: true }}');
  CheckTemplateResult('tobi', '{{ nil | default: "tobi" }}');

  Context['var1'] := 'foo';
  Context['var2'] := 'bar';
  CheckTemplateResult('foo', '{{ var1 | default: ''foobar'' }}');
  CheckTemplateResult('bar', '{{ var2 | default: ''foobar'' }}');
  CheckTemplateResult('foobar', '{{ unknownvariable | default: ''foobar'' }}');
  CheckTemplateResult('foo', '{{ unknownvariable | default: var1 }}');
end;

procedure StandardFilters.Downcase;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  SetContext(Context);

  CheckTemplateResult('i want this to be lowercase',
    '{{ ''I WANT THIS TO BE LOWERCASE'' | downcase }}');

  CheckTemplateResult('i want this to be lowercase',
    '{{ "I WANT THIS TO BE LOWERCASE" | downcase }}');

  CheckTemplateResult('test', '{{ "Test" | downcase }}');
  CheckTemplateResult('test', '{{ "TESt" | downcase }}');

  CheckTemplateResult('5', '{{ 5 | downcase }}');
  CheckTemplateResult('0', '{{ 0 | downcase }}');
  CheckTemplateResult('false', '{{ false | downcase }}');

  Context['var1'] := 'FOO';
  Context['var2'] := 'BAR';
  CheckTemplateResult('foo', '{{ var1 | downcase }}');
  CheckTemplateResult('bar', '{{ var2 | downcase }}');
  CheckTemplateResult('', '{{ unknown | downcase }}');
end;

procedure StandardFilters.Slice;
begin
  CheckTemplateResult('', '{{ null | slice: 1 }}');
  CheckTemplateResult('', '{{ "" | slice: 10 }}');

  CheckTemplateResult('b', '{{ "abcdefg" | slice: 1 }}');
  CheckTemplateResult('abc', '{{ "abcdefg" | slice: 0, 3 }}');
  CheckTemplateResult('bcd', '{{ "abcdefg" | slice: 1, 3 }}');
  CheckTemplateResult('efg', '{{ "abcdefg" | slice: -3, 3 }}');
  CheckTemplateResult('efg', '{{ "abcdefg" | slice: -3, 30 }}');
  CheckTemplateResult('efg', '{{ "abcdefg" | slice: 4, 30 }}');
  CheckTemplateResult('a', '{{ "abc" | slice: -4, 2 }}');
  CheckTemplateResult('', '{{ "abcdefg" | slice: -10, 1 }}');
end;

procedure StandardFilters.Upcase;
begin
  var Context := TLiquidContext.Create(TFormatSettings.Invariant);
  SetContext(Context);

  CheckTemplateResult('I WANT THIS TO BE UPPERCASE',
    '{{ ''i want this to be uppercase'' | upcase }}');

  CheckTemplateResult('I WANT THIS TO BE UPPERCASE',
    '{{ "i want this to be uppercase" | upcase }}');

  CheckTemplateResult('TEST', '{{ "test" | upcase }}');
  CheckTemplateResult('TEST', '{{ "TEST" | upcase }}');

  CheckTemplateResult('5', '{{ 5 | upcase }}');
  CheckTemplateResult('0', '{{ 0 | upcase }}');
  CheckTemplateResult('false', '{{ false | upcase }}');

  Context['var1'] := 'foo';
  Context['var2'] := 'bar';
  CheckTemplateResult('FOO', '{{ var1 | upcase }}');
  CheckTemplateResult('BAR', '{{ var2 | upcase }}');
  CheckTemplateResult('', '{{ unknown | upcase }}');
end;

initialization
  RegisterTest(Hash.Suite);
  RegisterTest(Variables.Suite);
  RegisterTest(Assign.Suite);
  RegisterTest(_If.Suite);
  RegisterTest(_For.Suite);
  RegisterTest(Conditions.Suite);
  RegisterTest(StandardFilters.Suite);
  RegisterTest(Template.Suite);
  RegisterTest(AnotherTests.Suite);

end.

